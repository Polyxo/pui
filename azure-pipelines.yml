variables:
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/') }}:
    branchName: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
    branchName: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]

trigger:
  - main
  - feat/*

pool:
  vmImage: ubuntu-latest

steps:
  - checkout: self
    persistCredentials: true

  - script: |
      git config --global user.name "Azure Devops Pipeline"
      git config --global user.email "robert.guehne@wfp.org"
    displayName: Git config user
    condition: 

  - task: CmdLine@2
    displayName: Git Branch $(branchName)
    inputs:
      script: "git branch -r"

  - task: CmdLine@2
    displayName: Checkout $(branchName)
    inputs:
      script: "git checkout develop" #$(branchName)
  - task: NodeTool@0
    inputs:
      versionSpec: "16.x"
    displayName: "Install Node.js"

  - task: DownloadSecureFile@1
    name: npmrcFile
    displayName: "Download CA certificate"
    inputs:
      secureFile: "npmrc"
  - task: CmdLine@2
    inputs:
      script: cp $(npmrcFile.secureFilePath) ./.npmrc

  - script: |
      npm run lerna:versionNoPush
      git push --follow-tags origin HEAD:$(branchName)
    displayName: "npm run lerna:version"

  - bash: echo "##vso[task.setvariable variable=yarnCacheDir;]$(yarn cache dir)"
    displayName: Set yarn cache dir variable

  - script: |
      npmVersionString=$(node -p "require('./lerna.json').version") 
      echo "##vso[build.updatebuildnumber]$npmVersionString"
    displayName: "set build number"
  - task: CmdLine@2
    inputs:
      script: |
        cp $(npmrcFile.secureFilePath) .npmrc
        cp $(npmrcFile.secureFilePath) ./packages/helpers/.npmrc
        ls -a
        cat .npmrc
  - task: Cache@2
    inputs:
      key: '"yarn" | "$(Agent.OS)" | yarn.lock'
      restoreKeys: |
        yarn | "$(Agent.OS)"
        yarn
      path: $(yarnCacheDir)
    displayName: Cache Yarn packages

  - script: |
      yarn install --frozen-lockfile
    displayName: "yarn install"

  - script: |
      yarn build
    displayName: "yarn build"

  - script: |
      npm run lerna:publishFromPackage
    displayName: "lerna publish"
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: "./packages/react"
      artifact: "uncore-react"
      publishLocation: "pipeline"
