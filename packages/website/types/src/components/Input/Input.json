[
  {
    "tags": {},
    "filePath": "src/components/Input/Input.tsx",
    "description": "Input is a wrapper for custom inputs providing the label, helperText and errors.",
    "displayName": "Input",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Provide a custom className that is applied directly to the underlying\n&lt;textarea&gt; node",
        "name": "children",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputPropsI"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputPropsI"
          },
          {
            "fileName": "un-core-v1/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "helperText": {
        "defaultValue": null,
        "description": "Provide text that is used alongside the control label for additional help",
        "name": "helperText",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelText": {
        "defaultValue": null,
        "description": "Provide the text that will be read by a screen reader when visiting this\ncontrol @design",
        "name": "labelText",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "formItemClassName": {
        "defaultValue": null,
        "description": "Provide a custom className that is applied directly to the underlying\n&lt;textarea&gt; node",
        "name": "formItemClassName",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inputWrapperClassName": {
        "defaultValue": null,
        "description": "Provide a custom className that is applied directly to the underlying\n&lt;textarea&gt; node",
        "name": "inputWrapperClassName",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "hideLabel": {
        "defaultValue": null,
        "description": "Specify whether you want the underlying label to be visually hidden",
        "name": "hideLabel",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "invalid": {
        "defaultValue": null,
        "description": "Specify whether the control is currently invalid.\nEither a boolean in combination with `invalidText` or an `object`( eg. { message: \"Message\", â€¦otherErrorProperties }) can be passed.",
        "name": "invalid",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | FieldError"
        }
      },
      "invalidText": {
        "defaultValue": null,
        "description": "Provide the text that is displayed when the control is in an invalid state @design",
        "name": "invalidText",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "additional": {
        "defaultValue": null,
        "description": "Provide the content that will be shown in addition to the label\n(e.g. units, currency, etc.)\nThis content will be placed after the label @design",
        "name": "additional",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "light": {
        "defaultValue": null,
        "description": "",
        "name": "light",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Specify the placeholder attribute for the input @design",
        "name": "placeholder",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Provide a unique identifier for the control",
        "name": "id",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Provide a name for the control",
        "name": "name",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "",
        "name": "required",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "",
        "name": "readOnly",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inline": {
        "defaultValue": null,
        "description": "",
        "name": "inline",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "addonBefore": {
        "defaultValue": null,
        "description": "",
        "name": "addonBefore",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "addonAfter": {
        "defaultValue": null,
        "description": "",
        "name": "addonAfter",
        "parent": {
          "fileName": "src/components/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/components/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      }
    }
  }
]